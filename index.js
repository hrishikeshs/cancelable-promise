// cancelable-promise/index.js
//
// Implement lightweight cancelable promises.
//
// Usage:
// ```
// require('cancelable-promise');
//
// new Promise(function(resolve, reject) { ... }, canceler).then(...).catch(...);
//                                                ^^^^^^^^
// ```

////////////////////////////////////////////////////////////////
// ERRORS

// promise-canceled-error.js
//
// Error types for cancelable promises.

const PROMISE_CANCELED_ERROR_NAME = 'PromiseCanceledError';

// Represent an error generated by promise cancelation.
class PromiseCanceledError extends Error {
  constructor(message) {
    super();
    this.message = message;
    this.name = PROMISE_CANCELED_ERROR_NAME;
  }
}

function isPromiseCanceledError(error) { return error.name === PROMISE_CANCELED_ERROR_NAME; }

// Handlers for use in `catch` handlers.
// Usage:
// ```
// promise.catch(handleCanceled(() => ...)).then(...)
// ```
function handleCanceled(handler) {
  return function(reason) {
    if (isPromiseCanceledError(reason)) handler(reason);
    else throw reason;
  };
}

function handleNotCanceled(handler) {
  return function(reason) {
    if (!isPromiseCanceledError(reason)) handler(reason);
    else throw reason;
  };
}

////////////////////////////////////////////////////////////////
// CANCELABLE PROMISE

const oldPromise = Promise;
const NOOP = _ => void 0;

class CancelablePromise extends oldPromise {

  constructor(executor, canceler) {
    super(function(resolve, reject) {
      // If the canceler has been canceled now, reject immediately.
      if (canceler && 'precancelReason' in canceler) reject(new PromiseCanceledError(canceler.precancelReason));

      // Call the executor. Its return value is the onCancel handler.
      const onCancel = executor(resolve, reject);

      if (!canceler) return;

      canceler.then(
        cancelerValue => {
          if (!onCancel) return reject(new PromiseCanceledError(cancelerValue));

          onCancel(cancelerValue).then(
            onCancelValue => reject(new PromiseCanceledError(onCancelValue)),
            NOOP // onCancel promise rejected--do nothing.
          );
        },
        NOOP
      );
    });
  }

  // Used only on promises used as cancelers.
  precancel(reason) { this.precancelReason = reason; }

}

// Hackery to replace Promise with CancelablePromise.
Promise = CancelablePromise;
['all', 'race', 'resolve', 'reject'].forEach(method => Promise[method] = oldPromise[method].bind(oldPromise));
Promise.prototype = oldPromise.prototype;

module.exports = {PromiseCanceledError, isPromiseCanceledError, handleCanceled, handleNotCanceled};
